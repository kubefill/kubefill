// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.12
// source: reposerver/reposervice.proto

package reposerver

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// RepoServiceClient is the client API for RepoService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RepoServiceClient interface {
	Sync(ctx context.Context, in *SyncRequest, opts ...grpc.CallOption) (*SyncResponse, error)
	SaveSshKey(ctx context.Context, in *SaveSshKeyRequest, opts ...grpc.CallOption) (*SaveSshKeyResponse, error)
	RemoveSshKey(ctx context.Context, in *RemoveSshKeyRequest, opts ...grpc.CallOption) (*RemoveSshKeyResponse, error)
	GetManifests(ctx context.Context, in *ManifestsRequest, opts ...grpc.CallOption) (*ManifestsResponse, error)
	GetRepoDir(ctx context.Context, in *RepoDirRequest, opts ...grpc.CallOption) (*RepoDirResponse, error)
	GetPaths(ctx context.Context, in *PathsRequest, opts ...grpc.CallOption) (*PathsResponse, error)
}

type repoServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewRepoServiceClient(cc grpc.ClientConnInterface) RepoServiceClient {
	return &repoServiceClient{cc}
}

func (c *repoServiceClient) Sync(ctx context.Context, in *SyncRequest, opts ...grpc.CallOption) (*SyncResponse, error) {
	out := new(SyncResponse)
	err := c.cc.Invoke(ctx, "/reposerver.RepoService/Sync", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *repoServiceClient) SaveSshKey(ctx context.Context, in *SaveSshKeyRequest, opts ...grpc.CallOption) (*SaveSshKeyResponse, error) {
	out := new(SaveSshKeyResponse)
	err := c.cc.Invoke(ctx, "/reposerver.RepoService/SaveSshKey", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *repoServiceClient) RemoveSshKey(ctx context.Context, in *RemoveSshKeyRequest, opts ...grpc.CallOption) (*RemoveSshKeyResponse, error) {
	out := new(RemoveSshKeyResponse)
	err := c.cc.Invoke(ctx, "/reposerver.RepoService/RemoveSshKey", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *repoServiceClient) GetManifests(ctx context.Context, in *ManifestsRequest, opts ...grpc.CallOption) (*ManifestsResponse, error) {
	out := new(ManifestsResponse)
	err := c.cc.Invoke(ctx, "/reposerver.RepoService/GetManifests", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *repoServiceClient) GetRepoDir(ctx context.Context, in *RepoDirRequest, opts ...grpc.CallOption) (*RepoDirResponse, error) {
	out := new(RepoDirResponse)
	err := c.cc.Invoke(ctx, "/reposerver.RepoService/GetRepoDir", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *repoServiceClient) GetPaths(ctx context.Context, in *PathsRequest, opts ...grpc.CallOption) (*PathsResponse, error) {
	out := new(PathsResponse)
	err := c.cc.Invoke(ctx, "/reposerver.RepoService/GetPaths", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RepoServiceServer is the server API for RepoService service.
// All implementations must embed UnimplementedRepoServiceServer
// for forward compatibility
type RepoServiceServer interface {
	Sync(context.Context, *SyncRequest) (*SyncResponse, error)
	SaveSshKey(context.Context, *SaveSshKeyRequest) (*SaveSshKeyResponse, error)
	RemoveSshKey(context.Context, *RemoveSshKeyRequest) (*RemoveSshKeyResponse, error)
	GetManifests(context.Context, *ManifestsRequest) (*ManifestsResponse, error)
	GetRepoDir(context.Context, *RepoDirRequest) (*RepoDirResponse, error)
	GetPaths(context.Context, *PathsRequest) (*PathsResponse, error)
	mustEmbedUnimplementedRepoServiceServer()
}

// UnimplementedRepoServiceServer must be embedded to have forward compatible implementations.
type UnimplementedRepoServiceServer struct {
}

func (UnimplementedRepoServiceServer) Sync(context.Context, *SyncRequest) (*SyncResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Sync not implemented")
}
func (UnimplementedRepoServiceServer) SaveSshKey(context.Context, *SaveSshKeyRequest) (*SaveSshKeyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SaveSshKey not implemented")
}
func (UnimplementedRepoServiceServer) RemoveSshKey(context.Context, *RemoveSshKeyRequest) (*RemoveSshKeyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveSshKey not implemented")
}
func (UnimplementedRepoServiceServer) GetManifests(context.Context, *ManifestsRequest) (*ManifestsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetManifests not implemented")
}
func (UnimplementedRepoServiceServer) GetRepoDir(context.Context, *RepoDirRequest) (*RepoDirResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRepoDir not implemented")
}
func (UnimplementedRepoServiceServer) GetPaths(context.Context, *PathsRequest) (*PathsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPaths not implemented")
}
func (UnimplementedRepoServiceServer) mustEmbedUnimplementedRepoServiceServer() {}

// UnsafeRepoServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RepoServiceServer will
// result in compilation errors.
type UnsafeRepoServiceServer interface {
	mustEmbedUnimplementedRepoServiceServer()
}

func RegisterRepoServiceServer(s grpc.ServiceRegistrar, srv RepoServiceServer) {
	s.RegisterService(&RepoService_ServiceDesc, srv)
}

func _RepoService_Sync_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SyncRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RepoServiceServer).Sync(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/reposerver.RepoService/Sync",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RepoServiceServer).Sync(ctx, req.(*SyncRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RepoService_SaveSshKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SaveSshKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RepoServiceServer).SaveSshKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/reposerver.RepoService/SaveSshKey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RepoServiceServer).SaveSshKey(ctx, req.(*SaveSshKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RepoService_RemoveSshKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveSshKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RepoServiceServer).RemoveSshKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/reposerver.RepoService/RemoveSshKey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RepoServiceServer).RemoveSshKey(ctx, req.(*RemoveSshKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RepoService_GetManifests_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ManifestsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RepoServiceServer).GetManifests(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/reposerver.RepoService/GetManifests",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RepoServiceServer).GetManifests(ctx, req.(*ManifestsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RepoService_GetRepoDir_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RepoDirRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RepoServiceServer).GetRepoDir(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/reposerver.RepoService/GetRepoDir",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RepoServiceServer).GetRepoDir(ctx, req.(*RepoDirRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RepoService_GetPaths_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PathsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RepoServiceServer).GetPaths(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/reposerver.RepoService/GetPaths",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RepoServiceServer).GetPaths(ctx, req.(*PathsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// RepoService_ServiceDesc is the grpc.ServiceDesc for RepoService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RepoService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "reposerver.RepoService",
	HandlerType: (*RepoServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Sync",
			Handler:    _RepoService_Sync_Handler,
		},
		{
			MethodName: "SaveSshKey",
			Handler:    _RepoService_SaveSshKey_Handler,
		},
		{
			MethodName: "RemoveSshKey",
			Handler:    _RepoService_RemoveSshKey_Handler,
		},
		{
			MethodName: "GetManifests",
			Handler:    _RepoService_GetManifests_Handler,
		},
		{
			MethodName: "GetRepoDir",
			Handler:    _RepoService_GetRepoDir_Handler,
		},
		{
			MethodName: "GetPaths",
			Handler:    _RepoService_GetPaths_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "reposerver/reposervice.proto",
}
